version: 2.1

orbs:
  codacy: codacy/base@2.14.8

references:
  qa_automation_image: &qa_automation_image
    docker:
      - image: codacy/qa-automation-test-runner:latest
      - image: selenium/standalone-chrome:3.141.0
        environment:
          JAVA_OPTS: -Xss256m -Xmx512m
          MAVEN_OPTS: -showversion -Xms256m -Xmx512m
    working_directory: ~/workdir

  integration_test_staging_environment: &integration_test_staging_environment
    SELENIUM_DRIVER_URL: http://localhost:4444/wd/hub
    HUB_URL: http://localhost:4444/wd/hub
    PROJECT_NAME: codacy-analysis-cli
    LAUNCH_DESCRIPTION: 'Automated Tests Ran by CircleCI'
    RP_ENDPOINT: https://reportportal.dev.codacy.org
    TEST_PATH: Suite/CLI/STAGING.xml
    LAUNCH_TAG: CIRCLECI;CLI;STAGING
    LAUNCH_NAME: CLI_STAGING

  integration_test_production_environment: &integration_test_production_environment
    SELENIUM_DRIVER_URL: http://localhost:4444/wd/hub
    HUB_URL: http://localhost:4444/wd/hub
    PROJECT_NAME: codacy-analysis-cli
    LAUNCH_DESCRIPTION: 'Automated Tests Ran by CircleCI'
    RP_ENDPOINT: https://reportportal.dev.codacy.org
    TEST_PATH: Suite/CLI/PROD.xml
    LAUNCH_TAG: CIRCLECI;CLI;PROD
    LAUNCH_NAME: CLI_STAGING

  attach_workspace: &attach_workspace
    attach_workspace:
      at: ~/workdir
  
  run_integration_tests: &run_integration_tests
    steps:
      - <<: *attach_workspace
      - add_ssh_keys:
          fingerprints:
            - "df:83:d7:c7:d5:79:06:c2:3b:d1:fd:e2:a3:d1:12:c5"
      - run:
          name: Clean CODACY_PROJECT_TOKEN
          command: echo 'unset CODACY_PROJECT_TOKEN' >> $BASH_ENV
      - run:
          name: Load docker from file
          command: |
            if [[ "$CODACY_ANALYSIS_CLI_VERSION" != "latest" ]]
            then
              docker load --input /tmp/workspace/workdir/docker-image.tar
              docker tag codacy-analysis-cli:dev-snapshot codacy/codacy-analysis-cli:dev-snapshot
            else
              echo "Skipping load of docker when testing latest"
            fi
      - run:
          name: Setup codacy-analysis-cli version for integration tests
          command: |
            if [[ -z "$CODACY_ANALYSIS_CLI_VERSION" ]]
            then
              echo 'export CODACY_ANALYSIS_CLI_VERSION="dev-snapshot"' >> $BASH_ENV
            fi
      - run:
          name: Install codacy-analysis-cli
          command: |
            curl -L https://github.com/codacy/codacy-analysis-cli/archive/master.tar.gz | tar xvz
            cd codacy-analysis-cli-* && sudo make install
            rm -rf codacy-analysis-cli-*
      - run:
          name: Run integration tests
          command: |
            export EXECUTION_TIME=`date +%F_%Hh%M-%Z`
            sh /opt/tests/qa-automation-test-runner/build/run_tests.sh

jobs:

  test_staging:
    <<: *qa_automation_image
    environment:
      <<: *integration_test_staging_environment
    <<: *run_integration_tests

  test_production:
    <<: *qa_automation_image
    environment:
      <<: *integration_test_production_environment
    <<: *run_integration_tests

workflows:
  version: 2
  test-and-publish:
    jobs:
      - codacy/checkout_and_version:
          write_sbt_version: true
      - codacy/sbt:
          name: compile
          cmd: sbt coverage +test:compile
          persist_to_workspace: true
          requires:
            - codacy/checkout_and_version
      - codacy/sbt:
          name: lint
          cmd: |
            sbt "scalafmtCheckAll;scalafmtSbtCheck;scapegoat;scalafixEnable;scalafix --test"
          requires:
            - compile
      - codacy/sbt:
          name: test
          cmd: |
            git config --global user.email "team@codacy.com"
            git config --global user.name "Codacy Team"
            sbt coverage +test coverageReport
            bash <(curl -Ls https://coverage.codacy.com/get.sh) report --skip
          requires:
            - compile
      - codacy/sbt:
          name: publish_docker_locally
          cmd: |
            sbt "set codacyAnalysisCli / version := \"dev-snapshot\";
                 codacyAnalysisCli/docker:publishLocal"
            docker save --output docker-image.tar $CIRCLE_PROJECT_REPONAME:dev-snapshot
          persist_to_workspace: true
          requires:
            - compile
      - test_staging
      - codacy/sbt:
          name: publish_lib
          context: CodacyAWS
          cmd: |
            sbt "retrieveGPGKeys;
                 codacyAnalysisCore/publishSigned;
                 +codacyAnalysisModels/publishSigned;
                 sonatypeBundleRelease"
          requires:
            - test_staging
      - codacy/publish_docker:
          name: publish_dockerhub
          context: CodacyDocker
          docker_tag: dev-snapshot
          requires:
            - test_staging
      - codacy/tag_version:
          context: CodacyAWS
          requires:
            - publish_dockerhub
      - publish_dockerhub_stable_hold:
          context: CodacyDocker
          type: approval
          requires:
            - test_staging
      - codacy/shell:
          name: publish_dockerhub_stable
          context: CodacyDocker
          cmd: |
            docker load --input docker-image.tar
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker tag codacy/$CIRCLE_PROJECT_REPONAME:dev-snapshot codacy/$CIRCLE_PROJECT_REPONAME:stable
            docker push codacy/$CIRCLE_PROJECT_REPONAME:stable
          requires:
            - publish_dockerhub_stable_hold

  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *" # Every day “At minute 00:00”
          filters:
            branches:
              only:
                - master
    jobs:
      - test_production